<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
padding = 64;
width = room_width - (padding * 2);
height = room_height - (padding * 2);

boxColor = c_white;
outlineColor = c_black;
rad = 16;

verticalMargin = 32;

pos = 0;
alarmSpeed = 0.25;
global.textAppearDelay = alarmSpeed * room_speed;
y = padding * 2;
initY = y;
finalY = y;
alarm_set(0, global.textAppearDelay);

scrollSpeed = 20; //pixels per something maybe?... I don't actually know

//creating surfaces - requires delay so that the pause
//controller can draw the blurred sprite first
alarm_set(1, global.textAppearDelay);
sprTopSurf = -1;
sprBottomSurf = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create surfaces and sprites
//surfaces to cover the text scrolling out of the box
topSurf = surface_create(width, padding);
bottomSurf = surface_create(width, padding);
surface_copy_part(topSurf, 0, 0, application_surface, 
    padding, 0, width, padding);
surface_copy_part(bottomSurf, 0, 0, application_surface,
    padding, padding + height, width, padding);
sprTopSurf = sprite_create_from_surface(topSurf, 0, 0, width, padding, false, false, 0, 0);
sprBottomSurf = sprite_create_from_surface(bottomSurf, 0, 0, width, padding, false, false, 0, 0);
surface_free(topSurf);
surface_free(bottomSurf);

alarm_set(1, -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the textboxes appear
if (pos &lt; instance_number(gui_textbox)) {
    for (var i = 0; i &lt; instance_number(gui_textbox); i++) {
        var inst = instance_find(gui_textbox, i);
        if (inst.order == pos) {
            with (inst) {        
                y = other.y;
                visible = true;
            }
            y += inst.height + verticalMargin;
            finalY = y;
            pos++;
            i = instance_number(gui_textbox);
        }
    }
    alarm_set(0, global.textAppearDelay);
} else {
    alarm_set(0, -1); //shut off alarm
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scrolling
if (mouse_wheel_up() &amp;&amp; y &lt; finalY) {
    with (gui_textbox) {
        y+=other.scrollSpeed;
    }
    y+=scrollSpeed;
} else if (mouse_wheel_down() &amp;&amp; y &gt; initY) {
    with (gui_textbox) {
        y-=other.scrollSpeed;
    }
    y-=scrollSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choosing a response
//only allowed after all the textboxes have spawned in
if (pos == instance_number(gui_textbox) &amp;&amp; instance_exists(class_npc)) {
    ini_open(class_npc.textSource);
    if (ini_section_exists(class_npc.scriptSection)) {
        for (var i = 1; i &lt; 9; i++) { //number of possible inputs
            //check for inputs
            if (keyboard_check_pressed(ord(string(i)))) {
                //get corresponding script
                var script = asset_get_index(ini_read_string(class_npc.scriptSection, string(i), "noone"));
                //get corresponding arguments
                var arg;
                //set default values for arg for script_execute_ext
                arg[1] = ""; arg[2] = ""; arg[3] = ""; arg[4] = ""; arg[5] = "";
                for (var n = 1; n &lt; array_length_1d(arg); n++) {
                    arg[n] = ini_read_string(class_npc.argumentSection, string(i) + "_" + string(n), "");
                }
                
                //if the script does not exist, don't do anything
                if (script != noone) {
                    script_execute_ext(script, arg[1], arg[2], arg[3], arg[4], arg[5]);
                    i = 9;
                    ini_close();
                    end_conversation();
                }
            }
        }
    }    
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete sprites
if (sprite_exists(sprTopSurf)) {
    sprite_delete(sprTopSurf);
}
if (sprite_exists(sprBottomSurf)) {
    sprite_delete(sprBottomSurf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete sprites
if (sprite_exists(sprTopSurf)) {
    sprite_delete(sprTopSurf);
}
if (sprite_exists(sprBottomSurf)) {
    sprite_delete(sprBottomSurf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw surface sprites
if (sprite_exists(sprTopSurf)) {
    draw_sprite(sprTopSurf, 0, padding, 0);
}
if (sprite_exists(sprBottomSurf)) {
    draw_sprite(sprBottomSurf, 0, padding, padding + height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw box
draw_roundrect_colour_ext(padding, padding, padding + width, padding + height, rad, rad, outlineColor, outlineColor, true);
draw_roundrect_colour_ext(padding, padding, padding + width, padding + height, rad, rad, boxColor, boxColor, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
