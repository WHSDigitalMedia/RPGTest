<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite16</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>class_nonGUI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables 
name = "Flan";

moveSpeed = 2;
allowMovement = true;
allowInput = true;

UP = ord("W");
LEFT = ord("A");
DOWN = ord("S");
RIGHT = ord("D");

ATK = 0;
DEF = 1;
SPD = 2;
ACC = 3;
HP = 4;

stat[ATK] = 10;
stat[DEF] = 10;
stat[SPD] = 10;
stat[ACC] = 10;
stat[HP] = 35;

statLevelCap = 50;
maxHP = stat[HP];
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if (allowMovement &amp;&amp; allowInput) {
    //checks for input
    var xInput = keyboard_check(RIGHT) - keyboard_check(LEFT);
    var yInput = keyboard_check(DOWN) - keyboard_check(UP);
    //biases toward the last key pressed
    if ((keyboard_lastkey == UP || keyboard_lastkey == DOWN) &amp;&amp; abs(yInput) &gt; 0) {
        xInput = 0;
    }
    if ((keyboard_lastkey == LEFT || keyboard_lastkey == RIGHT) &amp;&amp; abs(xInput) &gt; 0) {
        yInput = 0;
    }
    
    //actual moving
    var xMove = xInput * moveSpeed;
    var yMove = yInput * moveSpeed;
    
    //horizontal collisions
    if (place_meeting(x + xMove, y, class_solid)) {
        var xInc = sign(xMove);
        while (!place_meeting(x + xInc, y, class_solid)) {
            x += xInc;
        } 
        xMove = 0;
    }
    x += xMove;
    //vertical collisions
    if (place_meeting(x, y + yMove, class_solid)) {
        var yInc = sign(yMove);
        while (!place_meeting(x, y + yInc, class_solid)) {
            y += yInc;
        } 
        yMove = 0;
    }
    y += yMove;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///emergency restart
if (keyboard_check_pressed(ord("R"))) game_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat
//clamping of stat values
for (var i = 0; i &lt; array_length_1d(stat); i++) {
    stat[i] = clamp(stat[i], 0, statLevelCap);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
