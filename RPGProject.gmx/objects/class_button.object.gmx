<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
text = "";
textColor = c_black;
textAlpha = 1;
textFont = fnt_arial16;
textXPos = 0;
textYPos = 0;

INIT_OVER = 0;
END_OVER = 1;
INIT_EXIT = 2;
END_EXIT = 3;
mouseStatus = END_EXIT;
overAction = noone;
leaveAction = noone;
clickAction = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse actions
if (sprite_index != -1) {
    var mouseIsOver = point_in_rectangle(mouse_x, mouse_y, x - sprite_width/2, y - sprite_height/2, x + sprite_width/2, y + sprite_height/2);
    //checks to see if the mouse is over
    if (mouseIsOver) {
        //execute the over action only once
        if (mouseStatus != END_OVER) {
            mouseStatus = INIT_OVER;
        }
        
        //execute click action if clicked
        if (mouse_check_button_pressed(mb_left)) {
            if (script_exists(clickAction)) {
                script_execute(clickAction);
            }
        }
    }
    
    //checks to see if the mouse just stopped overlapping the button
    if (mouseStatus == END_OVER &amp;&amp; !mouseIsOver) {
        mouseStatus = INIT_EXIT;
    }
    
    //does the actual running of the scripts
    switch (mouseStatus) {
        case INIT_OVER: 
            if (script_exists(overAction)) {
                script_execute(overAction);
            }
            mouseStatus = END_OVER;
            break;
        case INIT_EXIT:
            if (script_exists(leaveAction)) {
                script_execute(leaveAction);
            }
            mouseStatus = END_EXIT;
            break;
        default: break; //do nothing after the initial begin/end overlap
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the text
draw_self();

draw_set_halign(fa_center); //center align
draw_set_valign(fa_middle); 

draw_set_font(textFont);
draw_text_colour(x + textXPos, y + textYPos, text, textColor, textColor, textColor, textColor, textAlpha);

draw_set_halign(fa_left); //reset align
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
