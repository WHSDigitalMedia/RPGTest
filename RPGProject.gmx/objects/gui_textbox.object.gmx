<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
text = "";
textFont = fnt_arial16;
textColor = c_black;
spr = -1;

rad = 4;
outlineColor = c_black;
boxColor = c_white;
padding = 8;

LEFT = 0;
RIGHT = 1;
CENTER = 2;
orientation = LEFT;
order = 0;

myAlpha = 0;
fadeDuration = global.textAppearDelay;
fadeSpeed = 1/fadeDuration;
done = false;

//these vars here are all set in the step event
height = 0;
x1 = 0;
y1 = 0;
x2 = 0;
y2 = 0;
width = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade Control
if (!done &amp;&amp; visible) {
    myAlpha += fadeSpeed;
    
    if (myAlpha == 1) {
        done = true;
    }
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Height and Orientation
var w = 32;
var h = 32;
if (sprite_exists(spr)) {
    var w = sprite_get_width(spr);
    var h = sprite_get_height(spr);
}
x1 = controller_text.padding * 2 + w;
y1 = y - h/2 - padding;
//not sure why I need to mult, but otherwise it clips
x2 = room_width - controller_text.padding * 2.25 - w;
y2 = y + height - padding;
width = (x2 - padding) - (x1 + padding);
height = string_height(text);

//if the width goes over the edge of the textbox
if (string_width(text) &gt; width) {
    //loop backwards through the text
    for (var i = string_length(text); i &gt; 0; i--) {
        //only run this if we hit a space
        if (string_copy(text, i, 1) == " ") {
            //see if the string up to that space is less than the width
            var testString = string_copy(text, 0, i);
            if (string_width(testString) &lt; width) {
                //if so, then replace the space with a line break
                text = string_delete(text, i, 1);
                text = string_insert("#", text, i);
                i = 0;
            }
        }
    }
}

//sets the draw location of the speaker
if (orientation == LEFT) {
    x = controller_text.padding * 2;
} else {
    if (spr != -1) {
        x = room_width - controller_text.padding * 2 - sprite_get_width(spr)/2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw textbox and sprite
var oldAlpha = draw_get_alpha(); //get current alpha value
draw_set_alpha(myAlpha);

//draws the sprite
if (sprite_exists(spr) &amp;&amp; visible) {
    draw_sprite(spr, 0, x, y);
}

//draw the box
draw_roundrect_colour_ext(x1, y1, x2, y2, rad, rad, boxColor, boxColor, false);
draw_roundrect_colour_ext(x1, y1, x2, y2, rad, rad, outlineColor, outlineColor, true);

//draw the text
draw_set_font(textFont);
if (orientation == LEFT || orientation == RIGHT) {
    draw_set_halign(fa_left);
    draw_text_colour(x1 + padding, y1 + padding, text, textColor, textColor, textColor, textColor, myAlpha);
} else if (orientation == CENTER) {
    draw_set_halign(fa_center);
    draw_text_colour(room_width/2, y1 + padding, text, textColor, textColor, textColor, textColor, myAlpha);
}
draw_set_halign(fa_left);

draw_set_alpha(oldAlpha); //reset the alpha
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
