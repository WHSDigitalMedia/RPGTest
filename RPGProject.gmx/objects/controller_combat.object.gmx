<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//sets the order that combatants go in
allyQueue = ds_priority_create();
enemyQueue = ds_priority_create();
queuesPopulated = false;
instanceSelected = false;

numTurnsElapsed = 0;
global.PLAYER_TURN = 0;
global.ENEMY_TURN = 1;
//this variable can be overriden in the step event if necessary
global.currentTurn = global.PLAYER_TURN; 
//the specific instance who is going
global.currentInstance = -1;

//what displays at the bottom
MOVES = 0;
MOVES_DESC = 1;
INVENTORY = 2; //see controller_inventory for actual display code
mode = MOVES;

buttonsCreated = false;
healthBarsCreated = false;
moveSelected = ""; //is set to the name of the calling button instance
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///place people in their spots
var playerSpawn = instance_find(class_allySpawn, 0);
with (class_player) {
    x = playerSpawn.x;
    y = playerSpawn.y;
}
var enemySpawn = instance_find(class_enemySpawn, 0);
with (class_npc) {
    x = enemySpawn.x;
    y = enemySpawn.y;
}

var iniName = class_npc.moveSource;
ini_open(iniName);
var pos = 1;
do {
    var enemySpawn = instance_find(class_enemySpawn, pos);
    var enemy = asset_get_index(ini_read_string("Enemies", string(pos), ""));
    instance_create(enemySpawn.x, enemySpawn.y, enemy);
    pos++;
} until (!ini_key_exists("Enemies", string(pos)));

ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create inventory toggle button
with (instance_create(room_width * 0.8, room_height * 0.8, class_button)) {
    sprite_index = spr_inv_button;
    text = "Show Inventory";
    overAction = set_text_color_white;
    leaveAction = set_text_color_black;
    clickAction = display_inv;
}

//set the mode of controller_inventory
with (controller_inventory) {
    mode = ITEMS;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Populating the Queues and create healthbars
if (!queuesPopulated) {
    //get the speeds of everyone
    var playerTotalSpeed = 0; 
    var playerTotalCount = 0;
    var playerAvgSpeed = 0;
    var enemyTotalSpeed = 0; 
    var enemyTotalCount = 0; 
    var enemyAvgSpeed = 0;

    //loop through all instances of class_npc
    for (var i = 0; i &lt; instance_number(class_npc); i++) {
        var inst = instance_find(class_npc, i);
        //check to see if the current npc is ally or enemy
        if (inst.alignment = inst.ALLY) {
            //if ally, add to ally queue
            //with priority being set to their speed
            ds_priority_add(allyQueue, inst, inst.stat[inst.SPD]); 
            playerTotalSpeed += inst.stat[inst.SPD];
            playerTotalCount++;
        } else if (inst.alignment = inst.ENEMY) {
            //if enemy, add to enemy queue
            //with priority being set to their speed
            ds_priority_add(enemyQueue, inst, inst.stat[inst.SPD]);
            enemyTotalSpeed += inst.stat[inst.SPD];
            enemyTotalCount++;
        }
    }
    
    //don't forget to add the player!
    var playerInst = instance_find(class_player, 0);
    ds_priority_add(allyQueue, playerInst, playerInst.stat[playerInst.SPD]);
    playerTotalSpeed += playerInst.stat[playerInst.SPD];
    playerTotalCount++;

    //get the average speeds
    playerAvgSpeed = round(playerTotalSpeed/playerTotalCount);
    enemyAvgSpeed = round(enemyTotalSpeed/enemyTotalCount);
    
    //if this is the first turn of the game, set who goes first
    if (numTurnsElapsed == 0) {
        if (playerAvgSpeed &gt; enemyAvgSpeed) {
            global.currentTurn = global.PLAYER_TURN;
        } else if (playerAvgSpeed &lt; enemyAvgSpeed) {
            global.currentTurn = global.ENEMY_TURN;
        }
    }
        
    //we're done here, so set this to true
    queuesPopulated = true;
    //and set this to false
    instanceSelected = false;
    buttonsCreated = false; //this too
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selecting the instance to go next
if (!instanceSelected) {
    //flips turns if queues are empty
    if (global.currentTurn == global.PLAYER_TURN) {
        if (ds_priority_empty(allyQueue)) {
            global.currentTurn = global.ENEMY_TURN;
        }
    } else if (global.currentTurn == global.ENEMY_TURN) {
        if (ds_priority_empty(enemyQueue)) {
            global.currentTurn = global.PLAYER_TURN;
        }
    }
    
    //refill the queues
    if (ds_priority_empty(allyQueue) &amp;&amp; ds_priority_empty(enemyQueue)) {
        queuesPopulated = false;
    } else {
        //sets the instance to go next
        if (global.currentTurn == global.PLAYER_TURN) {
            //makes sure that the instance exists
            do {
                global.currentInstance = ds_priority_delete_max(allyQueue);
            } until (instance_exists(global.currentInstance));
        } else if (global.currentTurn == global.ENEMY_TURN) {
            //makes sure that the instance exists
            do {
                global.currentInstance = ds_priority_delete_max(enemyQueue);
            } until (instance_exists(global.currentInstance));
        }
    }
    
    instanceSelected = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creating health bars
if (!healthBarsCreated) {
    for (var i = 0; i &lt; instance_number(class_npc); i++) {
        with (instance_create(x, y, gui_healthbar)) {
            owner = instance_find(class_npc, i);
        }
    }
    with (instance_create(x, y, gui_healthbar)) {
        owner = instance_find(class_player, 0);
    }
    healthBarsCreated = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>MOVES</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the player's moves
if (!buttonsCreated &amp;&amp; global.currentTurn == global.PLAYER_TURN) {
    //clear out all the old buttons
    with (class_button) {
        if (clickAction != display_inv) {
            instance_destroy();
        }
    }
    
    ini_open("move_data.ini");
    
    var move = 0;
    do {
        with (instance_create(room_width/2, room_height * 0.8 + (move * 64), class_button)) {
            sprite_index = spr_inv_button;
            text = ini_read_string(string(move), "name", "");
            overAction = set_text_color_white;
            leaveAction = set_text_color_black;
            clickAction = use_move;
            altClickAction = display_desc;
            textAlign = LEFT;
            textXPos = -sprite_width/2 + 4;
            mode = SINGLE_USE;
        }
        move++;
    } until (!ini_section_exists(string(move)));
    
    ini_close();
    
    buttonsCreated = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Picking a target
if (moveSelected != "") {
    var targ = pick_target();
    if (instance_exists(targ)) {
        ini_open("move_data.ini");
        var move = 0;
        var name = "";
        var type = 0;
        var amt = 0;
        var affect = 0;
        do {
            name = ini_read_string(string(move), "name", "");
            type = ini_read_real(string(move), "type", 0);
            amt = ini_read_real(string(move), "amount", 0);
            affect = ini_read_real(string(move), "stat", 0);
            move++;
        } until (name == moveSelected);
        if (type == 0) {
            targ.stat[targ.HP] -= amt;
        } else if (type == 2) {
            targ.stat[targ.HP] += amt;
        } else if (type == 4) {
            targ.stat[affect] += amt;
        }
        ini_close();
        
        //get the next person to go
        instanceSelected = false;   
        //reset the selected move     
        moveSelected = "";
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>MOVES_DESC</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a button to go back
if (!buttonsCreated) {
    //clear out all the old buttons
    with (class_button) {
        if (clickAction != display_inv) {
            instance_destroy();
        }
    }

    with (instance_create(room_width/2, room_height/2, class_button)) {
        sprite_index = spr_inv_button;
        text = "Return to moves"
        overAction = set_text_color_white;
        leaveAction = set_text_color_black;
        clickAction = display_desc;
        textAlign = LEFT;
        textXPos = -sprite_width/2 + 4;
        mode = SINGLE_USE;     
    }
    buttonsCreated = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>INVENTORY</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///actual buttons in controller_inventory
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up data structures
if (ds_exists(allyQueue, ds_type_priority)) {
    ds_priority_destroy(allyQueue);
}
if (ds_exists(enemyQueue, ds_type_priority)) {
    ds_priority_destroy(enemyQueue);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>MOVES_DESC</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show the move description
if (moveSelected != "") {
    ini_open("move_data.ini");
    
    //loop through the moves to find the one we want
    var pos = 0;
    var desc = "";
    do {
        //copy the description if we found the move
        if (ini_read_string(string(pos), "name", "") == moveSelected) {
            desc = ini_read_string(string(pos), "desc", "");
        }
        pos++;
    //break once pos exceeds the number of moves
    } until (!ini_section_exists(string(pos)));

    draw_text(room_width/2, room_height * 0.8, desc);
    
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
