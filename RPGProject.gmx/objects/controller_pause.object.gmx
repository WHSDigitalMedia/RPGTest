<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
global.UNPAUSE = 0;
global.STANDARD_PAUSE = 1;
global.TEXT_PAUSE = 2;
global.MAP_PAUSE = 3;
global.INVENTORY_PAUSE = 4;
global.COMBAT_PAUSE = 5;
global.pause = global.UNPAUSE;

intensity = 0.7; //the blur intensity
steps = 3; //also affects intensity but it's better to change the above value
draw = false; //has the sprite been created
roomIndex = rm_main_room; //room to return to
spr = -1; //the sprite the surface will draw

savedNPCX = 0;
savedNPCY = 0;
createNPC = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggling Pause
if (room != rm_text_interaction) { //so player can't exit text
    if (keyboard_check_pressed(vk_escape)) {
        pause_game(); //toggling the standard pause
    } else if (keyboard_check_pressed(ord("M"))) {
        open_map(); //toggling the map
    } else if (keyboard_check_pressed(ord("I"))) {
        open_inventory(); //toggling the inventory
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///What to do with player
if (global.pause != global.UNPAUSE &amp;&amp; (room == rm_pause_menu || room == rm_map_menu || room == rm_inventory_menu)) {
    //basically makes the player temporarily "not exist"
    with (class_player) {
        allowMovement = false;
        allowInput = false;
        visible = false;
    }
} //what to do when unpausing is in the toggle pause event
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bring back NPC from combat
if (createNPC &amp;&amp; room != rm_combat_interaction) {
    instance_create(savedNPCX, savedNPCY, createNPC);
    createNPC = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite cleanup
if (sprite_exists(spr)) {
    sprite_delete(spr);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates a sprite from the current view
if (global.pause &gt; global.UNPAUSE) {
    if (draw) {
        //blurring
        texture_set_interpolation(true);
        var i, surface;
        for (i = 0; i &lt;= steps; i++) {
            surface[i] = surface_create(window_get_width() * power(intensity, i), window_get_height() * power(intensity, i));
            surface_set_target(surface[i]);
            draw_clear_alpha(c_black, 1);
            surface_reset_target();
        }
        
        //copies the current view onto a new surface then resets the target to the current view
        surface_set_target(surface[0]);
        draw_surface(application_surface, 0, 0);
        surface_reset_target();
        
        //more blurring
        for (i = 1; i &lt;= steps; i++) {
            surface_set_target(surface[i]);
            draw_surface_ext(surface[i-1], 0, 0, intensity, intensity, 0, c_white, 1);
            surface_reset_target();
        }
        for (i = steps - 1; i &gt;= 0; i--) {
            surface_set_target(surface[i]);
            draw_surface_ext(surface[i+1], 0, 0, 1 / intensity, 1 / intensity, 0, c_white, 1);
            surface_reset_target();
        }
        
        //creates a sprite from the blurred surface to be drawn
        spr = sprite_create_from_surface(surface[0], 0, 0, window_get_width(), window_get_height(), false, false, 0, 0);
        //cleanup surfaces
        for (i = 0; i &lt;= steps; i++) surface_free(surface[i]);

        texture_set_interpolation(false);          
        draw = false; //so draw only runs once
        
        //Go to pause room
        switch (global.pause) {
            case global.STANDARD_PAUSE:
                room_goto(rm_pause_menu);
                break;
            case global.TEXT_PAUSE:
                room_goto(rm_text_interaction);
                break;
            default: break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draws the blurred background
if (room == rm_pause_menu || room == rm_text_interaction) {
    if sprite_exists(spr) {
        draw_sprite(spr, 0, 0, 0); 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
