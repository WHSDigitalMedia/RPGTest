<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
STILL = 0;
RANDOM_LOOK = 1;
RANDOM_WALK = 2;
FORWARD_BACK = 3;
moveType = RANDOM_WALK;

//random walk motion
randomTime = random_range(2 * room_speed, 4 * room_speed);
xTarg = x;
yTarg = y;
moveSpeed = 2;
deadband = 2;
maxDist = 64;
alarm_set(0, -1);

//forward back motion
initX = x;
finalX = x + 64;
initY = y;
finalY = y;
FORWARD = 0;
BACKWARD = 1;
dir = FORWARD;

//talking to the player
triggerDist = 32;
INIT_TRIGGER = 0;
CURRENT_TRIGGER = 1;
END_TRIGGER = 2;
triggerStatus = END_TRIGGER;
goFirst = false; //whether the player has to press 'e'

//mode
DEFAULT = 0;
CONTROLLER = 1;
mode = DEFAULT;

//text location
textFile = "npc_1_main_room.ini";
directory = working_directory + "Text_Interactions\NPC_1\";
textSource = directory + textFile;
textSection = "default";
sprSection = "default-sprites";
responseSection = "default-responses";
scriptSection = "default-scripts";
textCreated = false;
responsesCreated = false;
/* IMPORTANT NOTE
* all responses' keys must come after 
* the text keys in the INI file
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose a random direction to walk in
do {
    var goX = choose(true, false);
    if (goX) {
        xTarg = x + irandom_range(-maxDist, maxDist);
    } else {
        yTarg = y + irandom_range(-maxDist, maxDist);
    }
} until (!place_meeting(xTarg, yTarg, class_solid));

randomTime = random_range(2 * room_speed, 4 * room_speed);
alarm_set(0, randomTime);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>DEFAULT</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction state machine
visible = true; //just in case

switch (triggerStatus) {
    case INIT_TRIGGER:
        persistent = true;
        global.pause = global.TEXT_PAUSE;
        with (controller_pause) {
            draw = true;
            roomIndex = room;
        }
        triggerStatus = CURRENT_TRIGGER;
        break;
    case CURRENT_TRIGGER:
        if (distance_to_object(class_player) &gt; triggerDist) {
            triggerStatus = END_TRIGGER;
        }
        break;
    case END_TRIGGER:
        if (distance_to_object(class_player) &lt; triggerDist) {
            if (goFirst) {
                triggerStatus = INIT_TRIGGER;
            } else if (keyboard_check_pressed(ord('E'))) {
                triggerStatus = INIT_TRIGGER;
            }
        }
        break;
    default: break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement code
switch (moveType) {
    case RANDOM_WALK:
        //randomly choose locations and move to them
        if (x == xTarg &amp;&amp; y = yTarg) {
            if (alarm[0] == -1) {
                alarm_set(0, randomTime);
            }
        } else {
            //to prevent jittering
            if (point_distance(x, y, xTarg, yTarg) &lt;= deadband) {
                xTarg = x;
                yTarg = y;
            }
            var xMove = sign(xTarg - x) * moveSpeed;
            var yMove = sign(yTarg - y) * moveSpeed;
            x += xMove;
            y += yMove;
        }
        break;
    case FORWARD_BACK:
        //switch between back and forth
        if (dir == FORWARD) {
            var xMove = sign(finalX - x) * moveSpeed;
            var yMove = sign(finalY - y) * moveSpeed;
            if (x == finalX &amp;&amp; y == finalY) {
                dir = BACKWARD;
            }
        } else if (dir == BACKWARD) {
            var xMove = sign(initX - x) * moveSpeed;
            var yMove = sign(initY - y) * moveSpeed;
            if (x == initX &amp;&amp; y == initY) {
                dir = FORWARD;
            }
        }
        x += xMove;
        y += yMove;
        break;
    default: break; //still and random look
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>CONTROLLER</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get text and buttons
ini_open(textSource);
var pos = 0;

if (!textCreated) {    
    if (ini_section_exists(textSection)) {
        //pulls all text and corresponding sprites into the textboxes
        do {
            //create the textboxes
            with (instance_create(x, y, gui_textbox)) {
                text = ini_read_string(other.textSection, string(pos), "error");
                //use asset_get_index because GMS won't recognize a string
                spr = asset_get_index(ini_read_string(other.sprSection, string(pos), "-1"));
                //alternate the orientation of the sprite
                orientation = pos % 2;
                order = pos;
            }
            
            //update the position value to loop through all of these
            pos++;
        } until (!ini_key_exists(textSection, string(pos))); //done when no more text to read
    } else {
        show_debug_message("Section does not exist!");
        textCreated = true;
    }
    
    textCreated = true;
}

//basically the same code as above
if (!responsesCreated) {   
    if (ini_section_exists(responseSection)) {
        do {
            //create textboxes
            with (instance_create(x, y, gui_textbox)) {
                text = ini_read_string(other.responseSection, string(pos), "error");
                orientation = CENTER;
                order = pos;
            }
            
            pos++;
        } until (!ini_key_exists(responseSection, string(pos))); //done when no more buttons to read
    } else {
        show_debug_message("Section does not exist!");
        responsesCreated = true;
    }
    
    responsesCreated = true;
}

ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mode control
if (room == rm_text_interaction) {
    mode = CONTROLLER;
    visible = false;
} else {
    mode = DEFAULT;
    visible = true;
    textCreated = false;
    responsesCreated = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
